# GitHub Actions CI/CD Pipeline
# 
# This workflow runs tests in the following scenarios:
# 1. On Pull Requests - Full test suite including unit tests, linting, and security scans
# 2. On Direct Push to main/master - Full test suite (but skips merge commits to avoid duplication)
# 3. Integration tests run only on push to master branch (not on PR to avoid requiring secrets)
#
# The key benefit: Tests run once during PR review, and don't re-run unnecessarily after merge.

name: Tests

on:
  # Run on pull requests - this is where we do the main testing
  pull_request:
    branches: [ main, master, develop ]
  # Run on direct pushes to main/master only if it's not a merge commit
  push:
    branches: [ main, master ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    # Skip tests on merge commits to avoid double execution
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request'))
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install .NET runtime
      run: |
        # Install .NET runtime and Mono
        wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y dotnet-runtime-6.0 || true
        sudo apt-get install -y mono-runtime mono-devel || true
        
        # Set environment variables for pythonnet
        echo "PYTHONNET_RUNTIME=coreclr" >> $GITHUB_ENV
        
        # Verify installations
        dotnet --version || echo "dotnet not available"
        mono --version || echo "mono not available"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check test environment
      run: |
        python scripts/check_test_environment.py
    
    - name: Run unit tests
      run: |
        # Set environment variable to indicate we're in CI
        export CI=true
        python -m pytest tests/ -k "not test_integration" -v --tb=short
    
    - name: Run lint checks
      run: |
        # Install linting tools if they're not in requirements.txt
        pip install flake8 black isort || true
        # Run flake8 with our configuration
        flake8 src/ tests/ --config=.flake8
        echo "Linting completed successfully"

  integration-tests:
    runs-on: ubuntu-latest
    # Only run integration tests if secrets are available and skip merge commits
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'Merge pull request')
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check integration test configuration
      env:
        ENABLE_INTEGRATION_TESTS: ${{ secrets.ENABLE_INTEGRATION_TESTS }}
        TEST_XMLA_ENDPOINT: ${{ secrets.TEST_XMLA_ENDPOINT }}
        TEST_TENANT_ID: ${{ secrets.TEST_TENANT_ID }}
        TEST_CLIENT_ID: ${{ secrets.TEST_CLIENT_ID }}
        TEST_CLIENT_SECRET: ${{ secrets.TEST_CLIENT_SECRET }}
        TEST_INITIAL_CATALOG: ${{ secrets.TEST_INITIAL_CATALOG }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "Integration tests enabled: ${ENABLE_INTEGRATION_TESTS:-false}"
        if [ "${ENABLE_INTEGRATION_TESTS}" = "true" ]; then
          echo "‚úÖ Integration tests will run"
          echo "Test dataset: ${TEST_INITIAL_CATALOG:-Not configured}"
        else
          echo "‚ÑπÔ∏è  Integration tests disabled or not configured"
        fi
    
    - name: Run integration tests
      if: env.ENABLE_INTEGRATION_TESTS == 'true'
      env:
        ENABLE_INTEGRATION_TESTS: ${{ secrets.ENABLE_INTEGRATION_TESTS }}
        TEST_XMLA_ENDPOINT: ${{ secrets.TEST_XMLA_ENDPOINT }}
        TEST_TENANT_ID: ${{ secrets.TEST_TENANT_ID }}
        TEST_CLIENT_ID: ${{ secrets.TEST_CLIENT_ID }}
        TEST_CLIENT_SECRET: ${{ secrets.TEST_CLIENT_SECRET }}
        TEST_INITIAL_CATALOG: ${{ secrets.TEST_INITIAL_CATALOG }}
        TEST_EXPECTED_TABLE: ${{ secrets.TEST_EXPECTED_TABLE }}
        TEST_EXPECTED_COLUMN: ${{ secrets.TEST_EXPECTED_COLUMN }}
        TEST_DAX_QUERY: ${{ secrets.TEST_DAX_QUERY }}
        TEST_MIN_TABLES_COUNT: ${{ secrets.TEST_MIN_TABLES_COUNT }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üöÄ Running integration tests..."
        python run_integration_tests.py --yes

  linting:
    runs-on: ubuntu-latest
    # Skip linting on merge commits to avoid double execution
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request'))
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 src/ tests/ --config=.flake8
    
    - name: Check black formatting
      run: |
        black --check --diff src/ tests/ --line-length=120
    
    - name: Check isort formatting
      run: |
        isort --check-only --diff src/ tests/ --profile=black

  security-scan:
    runs-on: ubuntu-latest
    # Skip security scan on merge commits to avoid double execution
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request'))
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        echo "Security scan temporarily disabled"
        echo "TODO: Re-enable after fixing flake8 issues"
