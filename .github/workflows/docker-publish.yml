name: Build and Push Docker Image

on:
  workflow_run:
    workflows: [ "Tests" ]
    types: [ completed ]
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository at tested commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Compute lowercase image name
      id: vars
      shell: bash
      run: |
        REPO="${{ github.repository }}"
        echo "image=ghcr.io/${REPO,,}" >> "$GITHUB_OUTPUT"
    - name: Compute tags
      id: meta
      shell: bash
      env:
        HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
        PR_HEAD_REF: ${{ github.event.workflow_run.pull_requests[0].head.ref }}
        RUN_REF: ${{ github.event.workflow_run.ref }}
        DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
      run: |
        set -euo pipefail

        IMAGE="${{ steps.vars.outputs.image }}"

        BRANCH="${HEAD_BRANCH:-}"
        if [[ -z "${BRANCH}" ]]; then
          BRANCH="${PR_HEAD_REF:-}"
        fi
        if [[ -z "${BRANCH}" ]]; then
          REF_VAL="${RUN_REF:-}"
          if [[ "${REF_VAL}" =~ refs/heads/(.*) ]]; then
            BRANCH="${BASH_REMATCH[1]}"
          fi
        fi
        if [[ -z "${BRANCH}" ]]; then
          BRANCH="unknown"
        fi

        SHA="${HEAD_SHA}"
        SHORT_SHA="${SHA:0:7}"

        TAGS=()
        TAGS+=("${IMAGE}:${BRANCH}")
        TAGS+=("${IMAGE}:sha-${SHORT_SHA}")
        if [[ "${BRANCH}" == "${DEFAULT_BRANCH}" ]]; then
          TAGS+=("${IMAGE}:latest")
        fi

        {
          echo 'tags<<EOF'
          printf '%s\n' "${TAGS[@]}"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"

    # Note: Building only linux/amd64 due to ADOMD.NET retail package being amd64-only.
    # If/when upstream ARM packages are supported, add linux/arm64 here.
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max


